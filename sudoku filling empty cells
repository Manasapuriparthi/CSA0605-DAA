def solve_sudoku(board):
    """
    Solves the Sudoku puzzle using backtracking.
    :param board: 2D list representing the Sudoku board, where '.' denotes empty cells.
    :return: True if the board is solved, False otherwise.
    """
    def is_valid(board, row, col, num):
        """
        Checks if it's valid to place the number `num` at position (row, col).
        :param board: 2D list representing the Sudoku board.
        :param row: Row index.
        :param col: Column index.
        :param num: Number to place.
        :return: True if valid, False otherwise.
        """
        # Check if the number is not repeated in the current row
        if num in board[row]:
            return False
        
        # Check if the number is not repeated in the current column
        for r in range(9):
            if board[r][col] == num:
                return False
        
        # Check if the number is not repeated in the current 3x3 box
        start_row, start_col = 3 * (row // 3), 3 * (col // 3)
        for r in range(start_row, start_row + 3):
            for c in range(start_col, start_col + 3):
                if board[r][c] == num:
                    return False
        
        return True
    
    def solve():
        """
        Solves the Sudoku board using backtracking.
        :return: True if the board is completely and correctly filled, False otherwise.
        """
        for row in range(9):
            for col in range(9):
                if board[row][col] == '.':
                    for num in '123456789':
                        if is_valid(board, row, col, num):
                            board[row][col] = num
                            if solve():
                                return True
                            board[row][col] = '.'
                    return False
        return True

    solve()
    return board

