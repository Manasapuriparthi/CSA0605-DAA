# Floyd's Algorithm Implementation

def floyd_warshall(n, edges):
    # Initialize distance matrix
    distance = [[float('inf')] * n for _ in range(n)]
    
    for i in range(n):
        distance[i][i] = 0
        
    for u, v, w in edges:
        distance[u][v] = w
        distance[v][u] = w  # Assuming undirected graph

    print("Distance matrix before applying Floyd's Algorithm:")
    for row in distance:
        print(row)

    # Floyd's Algorithm
    for k in range(n):
        for i in range(n):
            for j in range(n):
                if distance[i][j] > distance[i][k] + distance[k][j]:
                    distance[i][j] = distance[i][k] + distance[k][j]

    print("\nDistance matrix after applying Floyd's Algorithm:")
    for row in distance:
        print(row)

    return distance

# Input
n = 4
edges = [[0, 1, 3], [1, 2, 1], [1, 3, 4], [2, 3, 1]]
distance_matrix = floyd_warshall(n, edges)

# Identify and print the shortest path
shortest_path = min(distance_matrix[0][1:])  # Shortest path from city 0 to any other city
print("\nShortest path:", shortest_path)
