class UnionFind:
    def __init__(self, size):
        self.parent = list(range(size))
        self.rank = [0] * size

    def find(self, u):
        if self.parent[u] != u:
            self.parent[u] = self.find(self.parent[u])
        return self.parent[u]

    def union(self, u, v):
        rootU = self.find(u)
        rootV = self.find(v)
        
        if rootU != rootV:
            if self.rank[rootU] > self.rank[rootV]:
                self.parent[rootV] = rootU
            elif self.rank[rootU] < self.rank[rootV]:
                self.parent[rootU] = rootV
            else:
                self.parent[rootV] = rootU
                self.rank[rootU] += 1

def boruvka_algorithm(vertices, edges):
    num_vertices = len(vertices)
    uf = UnionFind(num_vertices)
    
    # Initialize MST and cost
    mst_cost = 0
    mst_edges = []
    
    # Initially, each vertex is its own component
    num_components = num_vertices
    
    while num_components > 1:
        # Array to store the minimum edge for each component
        min_edge = [-1] * num_vertices
        
        # Find the minimum edge for each component
        for u, v, weight in edges:
            rootU = uf.find(u)
            rootV = uf.find(v)
            
            if rootU != rootV:
                if min_edge[rootU] == -1 or min_edge[rootU][2] > weight:
                    min_edge[rootU] = (u, v, weight)
                if min_edge[rootV] == -1 or min
