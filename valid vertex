def is_valid_vertex(v, pos, path, graph):
    """Check if the vertex `v` can be added to the Hamiltonian cycle."""
    # Check if this vertex is an adjacent vertex of the previously added vertex
    if graph[path[pos - 1]][v] == 0:
        return False

    # Check if the vertex has already been included
    if v in path:
        return False

    return True

def hamiltonian_cycle_util(graph, path, pos):
    """Recursive utility to solve Hamiltonian Cycle problem."""
    n = len(graph)
    
    # Base case: If all vertices are included in the cycle
    if pos == n:
        # And if there is an edge from the last included vertex to the first vertex
        return graph[path[pos - 1]][path[0]] == 1

    # Try different vertices as the next candidate in the path
    for v in range(1, n):
        if is_valid_vertex(v, pos, path, graph):
            path[pos] = v
            if hamiltonian_cycle_util(graph, path, pos + 1):
                return True
            path[pos] = -1  # Backtrack

    return False

def find_hamiltonian_cycle(edges, n):
    """Function to check if a Hamiltonian cycle exists in the graph."""
    # Create an adjacency matrix
    graph = [[0] * n for _ in range(n)]
    for u, v in edges:
        graph[u][v] = 1
        graph[v][u] = 1

    # Initialize path array and start the cycle from vertex 0
    path = [-1] * n
    path[0] = 0

    # Start the recursive backtracking
    if hamiltonian_cycle_util(graph, path, 1):
        return True
    return False

# Example usage
edges = [(0, 1), (1, 2), (2, 3), (3, 0), (0, 2)]
n = 4
print(find_hamiltonian_cycle(edges, n))  # Output: True
