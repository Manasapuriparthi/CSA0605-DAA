def is_valid_coloring(graph, colors, vertex, color):
    """Check if it's valid to color `vertex` with `color`."""
    for neighbor in graph[vertex]:
        if colors[neighbor] == color:
            return False
    return True

def graph_coloring(graph, colors, vertex, num_colors):
    """Try to color the graph using `num_colors`."""
    if vertex == len(graph):
        return True
    
    for color in range(num_colors):
        if is_valid_coloring(graph, colors, vertex, color):
            colors[vertex] = color
            if graph_coloring(graph, colors, vertex + 1, num_colors):
                return True
            colors[vertex] = -1
    
    return False

def min_colors_required(graph):
    """Determine the minimum number of colors required to color the graph."""
    num_vertices = len(graph)
    colors = [-1] * num_vertices
    
    for num_colors in range(1, num_vertices + 1):
        if graph_coloring(graph, colors, 0, num_colors):
            return num_colors
    
    return num_vertices

def turn_based_coloring(graph, colors, num_colors):
    """Simulate the turn-based coloring to maximize regions colored by you."""
    num_vertices = len(graph)
    colored = [False] * num_vertices
    player_color_count = 0
    turn = 0  # 0: You, 1: Alice, 2: Bob
    
    while not all(colored):
        for vertex in range(num_vertices):
            if not colored[vertex]:
                if turn == 0:
                    player_color_count += 1
                colored[vertex] = True
                # Move to the next player
                turn = (turn + 1) % 3
                break
    
    return player_color_count

def main(edges, n):
    # Build the adjacency list
    graph = [[] for _ in range(n)]
    for u, v in edges:
        graph[u].append(v)
        graph[v].append(u)
    
    num_colors = min_colors_required(graph)
    
    colors = [-1] * n
    turn_based_max_color = turn_based_coloring(graph, colors, num_colors)
    
    return turn_based_max_color

# Example usage
edges = [(0, 1), (1, 2), (2, 3), (3, 0), (0, 2)]
n = 4
print(main(edges, n))  # Output will be the maximum number of regions you can color
