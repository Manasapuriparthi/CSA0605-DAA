import heapq
from collections import defaultdict

def kruskal(n, edges):
    # Union-Find data structure
    parent = list(range(n))
    rank = [0] * n
    
    def find(u):
        if parent[u] != u:
            parent[u] = find(parent[u])
        return parent[u]
    
    def union(u, v):
        root_u = find(u)
        root_v = find(v)
        
        if root_u != root_v:
            if rank[root_u] > rank[root_v]:
                parent[root_v] = root_u
            elif rank[root_u] < rank[root_v]:
                parent[root_u] = root_v
            else:
                parent[root_v] = root_u
                rank[root_u] += 1

    # Sort edges by weight
    edges.sort(key=lambda x: x[2])
    
    mst_weight = 0
    mst_edges = []
    for u, v, weight in edges:
        if find(u) != find(v):
            union(u, v)
            mst_edges.append((u, v, weight))
            mst_weight += weight
    
    return mst_edges, mst_weight

def verify_and_find_alternative_mst(n, edges, given_mst_edges):
    # Calculate MST using Kruskal's algorithm
    kruskal_mst_edges, kruskal_mst_weight = kruskal(n, edges)
    
    # Calculate weight of the given MST
    given_mst_weight = sum(weight for u, v, weight in given_mst_edges)
    
    if sorted(given_mst_edges) !=
