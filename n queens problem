def is_safe(board, row, col):
    for i in range(row):
        if board[i] == col or \
           board[i] - i == col - row or \
           board[i] + i == col + row:
            return False
    return True

def solve_n_queens_rectangular(board, row, N, M, solutions):
    if row >= N:
        solutions.append(board[:])
        return

    for col in range(M):
        if is_safe(board, row, col):
            board[row] = col
            solve_n_queens_rectangular(board, row + 1, N, M, solutions)
            board[row] = -1

def find_solutions(N, M):
    board = [-1] * N
    solutions = []
    solve_n_queens_rectangular(board, 0, N, M, solutions)
    return solutions

