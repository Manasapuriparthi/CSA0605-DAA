from itertools import combinations

def generate_subset_sums(arr):
    """Generate all subset sums for a given array."""
    subset_sums = set()
    for r in range(len(arr) + 1):
        for combo in combinations(arr, r):
            subset_sums.add(sum(combo))
    return sorted(subset_sums)

def find_closest_subset_sum(arr, target):
    """Find the subset sum closest to the target using the Meet in the Middle technique."""
    # Split the array into two halves
    mid = len(arr) // 2
    left_half = arr[:mid]
    right_half = arr[mid:]

    # Generate all subset sums for both halves
    left_sums = generate_subset_sums(left_half)
    right_sums = generate_subset_sums(right_half)
    
    # Initialize the best closest difference and best sum
    closest_sum = None
    min_diff = float('inf')

    # Iterate over each possible sum from the left half
    for left_sum in left_sums:
        # For each left_sum, find the best possible sum from the right half
        lo, hi = 0, len(right_sums) - 1
        while lo <= hi:
            mid = (lo + hi) // 2
            current_sum = left_sum + right_sums[mid]
            diff = abs(current_sum - target)
            if diff < min_diff:
                min_diff = diff
                closest_sum = current_sum

            if current_sum < target:
                lo = mid + 1
            else:
                hi = mid - 1

    return closest_sum

# Example usage
set_a = [45, 34, 4, 12, 5, 2]
target_a = 42
print("Closest sum for Set A:", find_closest_subset_sum(set_a, target_a))

set_b = [1, 3, 2, 7, 4, 6]
target_b = 10
print("Closest sum for Set B:", find_closest_subset_sum(set_b, target_b))
