from collections import defaultdict

def max_degree_vertex_cover(edges, num_vertices):
    """
    Find a vertex cover using the maximum degree heuristic.
    
    :param edges: List of edges where each edge is a tuple (u, v).
    :param num_vertices: Number of vertices in the graph.
    :return: A list of vertices that form the vertex cover.
    """
    # Initialize data structures
    vertex_cover = set()
    covered_edges = set()
    edge_set = set(edges)
    
    # Build adjacency list
    adjacency_list = defaultdict(set)
    for u, v in edges:
        adjacency_list[u].add(v)
        adjacency_list[v].add(u)
    
    # While there are uncovered edges
    while edge_set:
        # Find the vertex with the maximum degree
        vertex = max(adjacency_list, key=lambda v: len(adjacency_list[v]))
        
        # Add the vertex to the vertex cover
        vertex_cover.add(vertex)
        
        # Remove all edges incident to this vertex from the edge set
        for neighbor in adjacency_list[vertex]:
            if (vertex, neighbor) in edge_set or (neighbor, vertex) in edge_set:
                edge_set.discard((vertex, neighbor))
                edge_set.discard((neighbor, vertex))
        
        # Remove this vertex from adjacency list
        del adjacency_list[vertex]
    
    return list(vertex_cover)


