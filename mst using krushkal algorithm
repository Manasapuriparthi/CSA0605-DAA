class UnionFind:
    def __init__(self, size):
        # Initialize parent and rank
        self.parent = list(range(size))
        self.rank = [0] * size

    def find(self, u):
        # Path compression
        if self.parent[u] != u:
            self.parent[u] = self.find(self.parent[u])
        return self.parent[u]

    def union(self, u, v):
        rootU = self.find(u)
        rootV = self.find(v)
        
        if rootU != rootV:
            # Union by rank
            if self.rank[rootU] > self.rank[rootV]:
                self.parent[rootV] = rootU
            elif self.rank[rootU] < self.rank[rootV]:
                self.parent[rootU] = rootV
            else:
                self.parent[rootV] = rootU
                self.rank[rootU] += 1

def kruskal_algorithm(vertices, edges):
    """
    Find the Minimum Spanning Tree (MST) using Kruskal's Algorithm.

    :param vertices: List of vertex labels.
    :param edges: List of edges where each edge is a tuple (u, v, weight).
    :return: A tuple (mst_cost, mst_edges) where mst_cost is the total cost of the MST and mst_edges is a list of edges in the MST.
    """
    # Initialize Union-Find data structure
    uf = UnionFind(len(vertices))
    
    # Sort edges based on weight
    edges.sort(key=lambda x: x[2])
    
    mst_cost = 0
    mst_edges = []
    
    for u, v, weight in edges:
        if uf.find(u) != uf.find(v):
            uf.union(u, v)
            mst_cost += weight
            mst_edges.append((u, v, weight))
    
    return mst_cost, mst_edges

