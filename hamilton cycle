def is_hamiltonian_cycle(graph, path, pos, n):
    """
    Check if a Hamiltonian cycle exists starting from vertex `pos` in the current `path`.
    """
    # If all vertices are included in the path and there is an edge from the last vertex to the first vertex
    if pos == n:
        return graph[path[pos - 1]][path[0]] == 1

    for v in range(1, n):
        if (graph[path[pos - 1]][v] == 1 and v not in path):
            path[pos] = v
            if is_hamiltonian_cycle(graph, path, pos + 1, n):
                return True
            path[pos] = -1  # Backtrack
    
    return False

def find_hamiltonian_cycle(edges, n):
    """
    Function to check if a Hamiltonian cycle exists in the graph with n vertices.
    """
    # Create adjacency matrix
    graph = [[0] * n for _ in range(n)]
    for u, v in edges:
        graph[u][v] = 1
        graph[v][u] = 1

    # Initialize the path
    p
