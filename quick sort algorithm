def quick_sort(arr, low, high):
    if low < high:
        # Partition the array
        pivot_index = partition(arr, low, high)
        # Display the array after partition
        print(f"Array after partitioning with pivot {arr[low]}: {arr}")
        # Recursively apply Quick Sort to the sub-arrays
        quick_sort(arr, low, pivot_index - 1)
        quick_sort(arr, pivot_index + 1, high)

def partition(arr, low, high):
    pivot = arr[low]  # Pivot is the first element
    left = low + 1
    right = high

    while True:
        # Increment left index while arr[left] < pivot
        while left <= right and arr[left] <= pivot:
            left += 1
        # Decrement right index while arr[right] > pivot
        while left <= right and arr[right] > pivot:
            right -= 1
        # If there is an element larger than pivot on the left of the pivot,
        # and an element smaller than pivot on the right, swap them
        if left > right:
            break
        arr[left], arr[right] = arr[right], arr[left]
    
    # Swap the pivot with the element at the right index
    arr[low], arr[right] = arr[right], arr[low]
    return right

