def combination_sum(candidates, target):
    def backtrack(start, target, path):
        """
        Backtracks to find all combinations that sum up to the target.
        :param start: The starting index for the current recursion to avoid duplicates.
        :param target: The remaining target sum.
        :param path: The current combination of numbers being explored.
        """
        if target == 0:
            # If the target is 0, we have found a valid combination
            result.append(path)
            return
        if target < 0:
            # If the target becomes negative, stop exploring this path
            return
        
        for i in range(start, len(candidates)):
            # Include the candidate and move forward with the reduced target
            backtrack(i, target - candidates[i], path + [candidates[i]])
    
    result = []
    backtrack(0, target, [])
    return result

