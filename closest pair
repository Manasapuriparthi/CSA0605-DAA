def euclidean_distance(p1, p2):
    return math.sqrt((p1[0] - p2[0]) * 2 + (p1[1] - p2[1]) * 2)

def closest_pair_in_strip(strip, d):
    min_dist = d
    strip.sort(key=lambda point: point[1])
    
    for i in range(len(strip)):
        for j in range(i + 1, len(strip)):
            if (strip[j][1] - strip[i][1]) < min_dist:
                min_dist = min(min_dist, euclidean_distance(strip[i], strip[j]))
    
    return min_dist

def closest_pair_recursive(points_x, points_y):
    if len(points_x) <= 3:
        min_dist = float('inf')
        for i in range(len(points_x)):
            for j in range(i + 1, len(points_x)):
                min_dist = min(min_dist, euclidean_distance(points_x[i], points_x[j]))
        return min_dist

    mid = len(points_x) // 2
    mid_point = points_x[mid]
    
    left_x = points_x[:mid]
    right_x = points_x[mid:]
    
    left_y = []
    right_y = []
    for point in points_y:
        if point[0] <= mid_point[0]:
            left_y.append(point)
        else:
            right_y.append(point)
    
    d1 = closest_pair_recursive(left_x, left_y)
    d2 = closest_pair_recursive(right_x, right_y)
    
    d = min(d1, d2)
    
    strip = [point for point in points_y if abs(point[0] - mid_point[0]) < d]
    
    return min(d, closest_pair_in_strip(strip, d))

def closest_pair(points):
    points_x = sorted(points, key=lambda point: point[0])
    points_y = sorted(points, key=lambda point: point[1])
    
    return closest_pair_recursive(points_x, points_y)
points = [(2, 3), (12, 30), (40, 50), (5, 1), (12, 10), (3, 4)]
result = closest_pair(points)
print("The smallest distance is:", result)
