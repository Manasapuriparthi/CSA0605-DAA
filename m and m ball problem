def findWays(m, n, N, i, j):
    # Define directions for moving in the grid: down, up, right, left
    directions = [(1, 0), (-1, 0), (0, 1), (0, -1)]
    
    # Initialize the DP table with 0s
    dp = [[[0] * n for _ in range(m)] for _ in range(N + 1)]
    
    # Base case: Start at (i, j) with 0 steps
    dp[0][i][j] = 1
    
    # Fill the DP table
    for step in range(N):
        for x in range(m):
            for y in range(n):
                if dp[step][x][y] > 0:
                    for dx, dy in directions:
                        nx, ny = x + dx, y + dy
                        # If the new position is out of bounds, increase the result count
                        if 0 <= nx < m and 0 <= ny < n:
                            dp[step + 1][nx][ny] += dp[step][x][y]
                        else:
                            dp[step + 1][x][y] += dp[step][x][y]
    
    # Calculate the number of ways to move out of the grid
    result = 0
    for x in range(m):
        for y in range(n):
            result += dp[N][x][y]
    
    return result

# Example usage
m1, n1, N1, i1, j1 = 2, 2, 2, 0, 0
print("Number of ways to move out of the grid:", findWays(m1, n1, N1, i1, j1))  # Output: 6

m2, n2, N2, i2, j2 = 1, 3, 3, 0, 1
print("Number of ways to move out of the grid:", findWays(m2, n2, N2, i2, j2))  # Output: 12
